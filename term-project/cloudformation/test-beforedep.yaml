
AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template to create a Lambda function and HTTP API
#https://docs.aws.amazon.com/aws-backup/latest/devguide/assigning-resources.html
Parameters:
  BackupVaultName:
    Type: String
    Default: "CloudFormationTestBackupVault"
  BackupPlanName:
    Type: String
    Default: "CloudFormationTestBackupPlan"
  BackupSelectionName: 
    Type: String
    Default: "CloudFormationTestBackupSelection"
  BackupPlanTagValue:
    Type: String
    Default: "test-value-1"
  RuleName1:
    Type: String
    Default: "TestRule1"
  ScheduleExpression:
    Type: String
    Default: "cron(0 3/1 * * ? *)"
  StartWindowMinutes:
    Type: Number
    Default: 60
  CompletionWindowMinutes:
    Type: Number
    Default: 120
  RecoveryPointTagValue:
    Type: String
    Default: "test-recovery-point-value"
  MoveToColdStorageAfterDays:
    Type: Number
    Default: 120
  DeleteAfterDays:
    Type: Number
    Default: 210

Resources:
  UsersDBTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: "aahshaikh-usersdb"
      AttributeDefinitions:
        - AttributeName: "usermail"
          AttributeType: "S"
        - AttributeName: "score"
          AttributeType: "N"
      KeySchema:
        - AttributeName: "usermail"
          KeyType: "HASH"
      Tags:
        - Key: "aahshaikh"
          Value: "backup"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      GlobalSecondaryIndexes:
        - IndexName: "score-index"
          KeySchema:
            - AttributeName: "score"
              KeyType: "HASH"
          Projection:
            ProjectionType: "ALL"
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
      BillingMode: "PROVISIONED"

  HabitsDBTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: "aahshaikh-habitsdb"
      Tags:
        - Key: "aahshaikh"
          Value: "backup"
      AttributeDefinitions:
        - AttributeName: "habitID"
          AttributeType: "S"
        - AttributeName: "usermail"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "habitID"
          KeyType: "HASH"
        - AttributeName: "usermail"
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      BillingMode: "PROVISIONED"

  CloudFormationTestBackupVault:
    Type: "AWS::Backup::BackupVault"
    Properties:
      BackupVaultName: !Ref BackupVaultName
  
  BasicBackupPlan:
    Type: "AWS::Backup::BackupPlan"
    Properties:
      BackupPlan:
        BackupPlanName: !Ref BackupPlanName
        BackupPlanRule:
          - RuleName: !Ref RuleName1
            TargetBackupVault: !Ref BackupVaultName
            ScheduleExpression: !Ref ScheduleExpression
            StartWindowMinutes: !Ref StartWindowMinutes
            CompletionWindowMinutes: !Ref CompletionWindowMinutes
            RecoveryPointTags:
              test-recovery-point-key-1: !Ref RecoveryPointTagValue
            Lifecycle:
              MoveToColdStorageAfterDays: !Ref MoveToColdStorageAfterDays
              DeleteAfterDays: !Ref DeleteAfterDays
      BackupPlanTags:
        test-key-1: !Ref BackupPlanTagValue
    DependsOn: CloudFormationTestBackupVault

  BasicBackupSelection:
    Type: 'AWS::Backup::BackupSelection'
    Properties:
      BackupPlanId: !Ref BasicBackupPlan
      BackupSelection:
        SelectionName: !Ref BackupSelectionName
        IamRoleArn: arn:aws:iam::673619607849:role/LabRole
        ListOfTags:
          - ConditionType: STRINGEQUALS
            ConditionKey: aahshaikh
            ConditionValue: backup
        NotResources:
          - 'arn:aws:rds:*:*:cluster:*'
        
  
  
  # # Create Backup Vault (if not already created)
  # BackupVault:
  #   Type: AWS::Backup::BackupVault
  #   Properties:
  #     BackupVaultName: "MyDynamoDBBackupVault"
  # # Create Backup Plan for DynamoDB Tables
  # BackupPlan:
  #   Type: AWS::Backup::BackupPlan
  #   Properties:
  #     BackupPlan:
  #       BackupPlanName: "DynamoDBBackupPlan"
  #       BackupPlanRule:
  #         - RuleName: "DynamoDBBackupRule"
  #           TargetBackupVault: !Ref BackupVault
  #           ScheduleExpression: "cron(0 0 * * ? *)" # Run every midnight
  #           StartWindowMinutes: 60
  #           CompletionWindowMinutes: 10080
           
      
  LambdaFnRegLogin:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: aahshaikh-regloginLambda
      Handler: index.handler
      Runtime: nodejs14.x
      Code:
        S3Bucket: aahshaikh-reglogin
        S3Key: aahshaikh-reglogin.zip
      Role: arn:aws:iam::673619607849:role/LabRole

  ApiGatewayRegLogin:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: aahshaikh-reglogin-api
      ProtocolType: HTTP
      CorsConfiguration:
        AllowMethods:
          - "GET"
          - "POST"
          - "PUT"
          - "DELETE"
        AllowOrigins:
          - "*"
        AllowHeaders:
          - "*"

  LambdaPermissionHealth:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFnRegLogin
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRegLogin}/*/*"

  LambdaPermissionLogin:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFnRegLogin
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRegLogin}/*/*"

  LambdaPermissionRegister:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFnRegLogin
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRegLogin}/*/*"

  LambdaPermissionVerify:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFnRegLogin
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRegLogin}/*/*"


  HealthIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ApiGatewayRegLogin
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFnRegLogin.Arn}/invocations
      PayloadFormatVersion: "2.0"  # Add this line to specify the payload format version

  LoginIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ApiGatewayRegLogin
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFnRegLogin.Arn}/invocations
      PayloadFormatVersion: "2.0"  # Add this line to specify the payload format version

  RegisterIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ApiGatewayRegLogin
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFnRegLogin.Arn}/invocations
      PayloadFormatVersion: "2.0"  # Add this line to specify the payload format version

  VerifyIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ApiGatewayRegLogin
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFnRegLogin.Arn}/invocations
      PayloadFormatVersion: "2.0"  # Add this line to specify the payload format version

  HealthRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGatewayRegLogin
      RouteKey: "GET /health"
      Target: !Join
        - "/"
        - - integrations
          - !Ref HealthIntegration

  LoginRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGatewayRegLogin
      RouteKey: "POST /login"
      Target: !Join
        - "/"
        - - integrations
          - !Ref LoginIntegration

  RegisterRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGatewayRegLogin
      RouteKey: "POST /register"
      Target: !Join
        - "/"
        - - integrations
          - !Ref RegisterIntegration

  VerifyRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGatewayRegLogin
      RouteKey: "POST /verify"
      Target: !Join
        - "/"
        - - integrations
          - !Ref VerifyIntegration

  
  DefaultStageRegLogin:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref ApiGatewayRegLogin
      StageName: "$default"
      AutoDeploy: true
      Description: "Default Stage"
    
  LambdaFnHabits:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: aahshaikh-HabitLambda
      Handler: index.handler
      Runtime: nodejs14.x
      Code:
        S3Bucket: aahshaikh-habits
        S3Key: aahshaikh-habits.zip
      Role: arn:aws:iam::673619607849:role/LabRole

  ApiGatewayHabits:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: aahshaikh-habits-api
      ProtocolType: HTTP
      CorsConfiguration:
        AllowMethods:
          - "GET"
          - "POST"
          - "PUT"
          - "DELETE"
        AllowOrigins:
          - "*"
        AllowHeaders:
          - "*"

  LambdaPermissionAdd:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFnHabits
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayHabits}/*/*"

  LambdaPermissionComplete:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFnHabits
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayHabits}/*/*"

  LambdaPermissionDelete:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFnHabits
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayHabits}/*/*"

  LambdaPermissionGetHabit:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFnHabits
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayHabits}/*/*"


  AddIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ApiGatewayHabits
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFnHabits.Arn}/invocations
      PayloadFormatVersion: "2.0"  # Add this line to specify the payload format version

  CompleteIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ApiGatewayHabits
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFnHabits.Arn}/invocations
      PayloadFormatVersion: "2.0"  # Add this line to specify the payload format version

  DeleteIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ApiGatewayHabits
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFnHabits.Arn}/invocations
      PayloadFormatVersion: "2.0"  # Add this line to specify the payload format version

  GetHabitIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ApiGatewayHabits
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFnHabits.Arn}/invocations
      PayloadFormatVersion: "2.0"  # Add this line to specify the payload format version

  AddRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGatewayHabits
      RouteKey: "POST /addhabit"
      Target: !Join
        - "/"
        - - integrations
          - !Ref AddIntegration

  CompleteRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGatewayHabits
      RouteKey: "POST /complete"
      Target: !Join
        - "/"
        - - integrations
          - !Ref CompleteIntegration

  DeleteRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGatewayHabits
      RouteKey: "POST /deletehabit"
      Target: !Join
        - "/"
        - - integrations
          - !Ref DeleteIntegration

  GetHabitRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGatewayHabits
      RouteKey: "POST /gethabit"
      Target: !Join
        - "/"
        - - integrations
          - !Ref GetHabitIntegration

  
  DefaultStageHabit:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref ApiGatewayHabits
      StageName: "$default"
      AutoDeploy: true
      Description: "Default Stage"

  LambdaFnScore:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: aahshaikh-scoreLambda
      Handler: index.handler
      Runtime: nodejs14.x
      Code:
        S3Bucket: aahshaikh-score
        S3Key: aahshaikh-score.zip
      Role: arn:aws:iam::673619607849:role/LabRole

  ApiGatewayScore:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: aahshaikh-regscore-api
      ProtocolType: HTTP
      CorsConfiguration:
        AllowMethods:
          - "GET"
          - "POST"
          - "PUT"
          - "DELETE"
        AllowOrigins:
          - "*"
        AllowHeaders:
          - "*"

  LambdaPermissionUpdate:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFnScore
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayScore}/*/*"

  UpdateIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ApiGatewayScore
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFnScore.Arn}/invocations
      PayloadFormatVersion: "2.0"  

  
  UpdateRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGatewayScore
      RouteKey: "POST /updatescore"
      Target: !Join
        - "/"
        - - integrations
          - !Ref UpdateIntegration

  
  DefaultStageScore:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref ApiGatewayScore
      StageName: "$default"
      AutoDeploy: true
      Description: "Default Stage"


Outputs:
  UsersDBTableArn:
    Description: "ARN of the aahshaikh-usersdb table"
    Value: !GetAtt UsersDBTable.Arn

  HabitsDBTableArn:
    Description: "ARN of the aahshaikh-habitsdb table"
    Value: !GetAtt HabitsDBTable.Arn

  ApiEndpointRegLogin:
    Description: URL endpoint of reg-login created HTTP API
    Value: !Sub "https://${ApiGatewayRegLogin}.execute-api.${AWS::Region}.amazonaws.com"  # Replace 'prod' with your desired stage name
  ApiEndpointHabit:
    Description: URL endpoint for habits of the created HTTP API
    Value: !Sub "https://${ApiGatewayHabits}.execute-api.${AWS::Region}.amazonaws.com"  # Replace 'prod' with your desired stage name 
  ApiEndpointScore:
    Description: URL endpoint score of the created HTTP API
    Value: !Sub "https://${ApiGatewayScore}.execute-api.${AWS::Region}.amazonaws.com" 
